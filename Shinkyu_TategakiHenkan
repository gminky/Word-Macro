Private Const ConstMILMokujiNum As Integer = 1
Private Const ConstMILMokujiTitleNum As Integer = 2
Private Const ConstMILHanreiTitleNum As Integer = 3

Sub rtf新旧縦書変換()
'------------------------------------------------------------------
' 縦書きフォーマット変更
' Ｗｅｂ版の新旧対照表ツールから出力したrtfを、
' 一太郎作成の新旧対照表の見た目に近づける変換を行う。
'------------------------------------------------------------------
'On Error GoTo errMsg
    Dim msg As String
    Dim houreiIndexList As New Collection
    Dim mokujiIndexList As New Collection
    Dim mokujiIndex As Single
    Dim mokujiTitleIndex As Single
    Dim hanreiTitleIndex As Single
    Dim footerStartPageNum As Integer
    msg = "縦書変換が完了しました。"

    '処理中描画停止
    Application.ScreenUpdating = False
    
    Set houreiIndexList = 法令タイトル位置リスト取得(mokujiIndexList)
    
    With ActiveDocument.PageSetup
        '余白指定
        .TopMargin = MillimetersToPoints(22)
        .BottomMargin = MillimetersToPoints(22)
        .LeftMargin = MillimetersToPoints(24)
        .RightMargin = MillimetersToPoints(25)
        
        '最大文字数、列数
        .CharsLine = 67
        .LinesPage = 31
        .LayoutMode = wdLayoutModeGrid
    End With
    
    Call フォント行間調整(houreiIndexList, mokujiIndexList)
    
    '縦書き変換
    ActiveDocument.Select
    Selection.WholeStory
    Selection.Orientation = wdTextOrientationHorizontalRotatedFarEast
    With Selection.ParagraphFormat
        .LineSpacingRule = wdLineSpaceExactly
        .LineSpacing = 13
        .SpaceBeforeAuto = False
        .SpaceAfterAuto = False
        .FarEastLineBreakControl = False
        .HangingPunctuation = True
    End With
    With Selection.Font
        .Spacing = 0.35
        .Name = "ＭＳ 明朝"
    End With
        
    Call インデント調整
    
    'Call 新旧表タイトル行間調整
    
    Call 表内縦書処理
        
    Call フッターセット(mokujiIndexList)

    Call 新旧表末尾空行削除
    
    Call 目次更新(mokujiIndexList)
    
    Call 縦中横処理(mokujiIndexList)
    
    
Finally:
On Error Resume Next

    Selection.HomeKey Unit:=wdStory
    
    '処理中描画再開
    Application.ScreenUpdating = True
    
    '処理終了メッセージ
    MsgBox (msg)
    
Exit Sub

errMsg:

    msg = "縦書変換に失敗しました。" & vbCrLf & "新旧対象ファイルが正しくない可能性があります。"
    
    Resume Finally
    
    
End Sub

Sub ページクリア()
  '--------------------------------------------------------------------------
  '開始時にフッターを削除する。
  '--------------------------------------------------------------------------

    Dim sec As Section
    Dim hd_ft As HeaderFooter
    
    '現在のページを全削除
    Selection.WholeStory
    Selection.Delete Unit:=wdCharacter, Count:=1
    
    '画面をヘッダーフッター編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    
    '元のフッターを削除
    For Each sec In ActiveDocument.Sections
        For Each hd_ft In sec.Footers
            hd_ft.Range.Delete
        Next hd_ft
    Next sec
    
    For Each shp In Selection.HeaderFooter.Shapes
        If shp.Type = msoAutoShape Then
            shp.Delete
        End If
    Next shp
    
    '画面をメイン編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    
End Sub

Private Sub フッターセット(ByVal mokujiIndexList As Collection)
  '--------------------------------------------------------------------------
  '縦書き用のフッターを設定する。
  '（オートシェイプで右余白に縦書きでページ番号を付与）
  '--------------------------------------------------------------------------

    Dim sec As Section
    Dim hd_ft As HeaderFooter
    Dim tategakiTemplatePath As String
    Dim shpaesPageNum As Integer
    
    
    '目次以前のページをセレクト
    ActiveDocument.Paragraphs(1).Range.Select
    '画面をヘッダーフッター編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    
    '元のフッターを削除
    For Each sec In ActiveDocument.Sections
        For Each hd_ft In sec.Footers
            hd_ft.Range.Delete
        Next hd_ft
    Next sec
    
    For Each delShp In Selection.HeaderFooter.Shapes
        If delShp.Type = msoAutoShape Then
            delShp.Delete
        End If
    Next delShp
    
    '目次以降のページをセレクト
    ActiveDocument.Paragraphs(mokujiIndexList(ConstMILMokujiNum) + 6).Range.Select
    
    '画面をヘッダーフッター編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    
    'フッター右寄せ
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    End If
    
    
    'ページ番号をページ右余白に追加
    For Each mytemplate In Templates
        If mytemplate.Name = ThisDocument.Name Then
            mytemplate.BuildingBlockEntries("縦書き用ページ番号").Insert Where:=Selection.Range, RichText:=True
        End If
    Next
        
    '目次以降のページをセレクト
    ActiveDocument.Paragraphs(mokujiIndexList(ConstMILMokujiNum) + 6).Range.Select
    
    '画面をヘッダーフッター編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    
    'ページ番号の書式設定・位置調整
    With Selection.HeaderFooter.PageNumbers
        .NumberStyle = wdPageNumberStyleNumberInDash
        .HeadingLevelForChapter = 0
        .IncludeChapterNumber = False
        .ChapterPageSeparator = wdSeparatorHyphen
        .RestartNumberingAtSection = True
        .StartingNumber = 1
    End With
    '目次以降のページをセレクト
    ActiveDocument.Paragraphs(mokujiIndexList(ConstMILMokujiNum) + 6).Range.Select
    
    '画面をヘッダーフッター編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    For Each shp In Selection.HeaderFooter.Shapes
        If shp.Type = msoAutoShape Then
            shp.Select Replace:=False
            If Selection.Information(wdActiveEndAdjustedPageNumber) <> 1 Then
                Selection.HeaderFooter.PageNumbers.StartingNumber = 0
            End If
            Selection.ShapeRange.ScaleHeight 1.55, msoFalse, msoScaleFromTopLeft
            shp.Top = 212
            shp.Left = 34
            Selection.Font.Name = "ＭＳ 明朝"
            Selection.Font.Size = 10.5
        End If
    Next shp
    
    '画面をメイン編集モードに切り替え
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    
End Sub

Private Sub 表内縦書処理()
  '--------------------------------------------------------------------------
  '表中縦書処理を行う
  '（全体に対する縦書設定だけでは表内の文字列に反映されないので、表毎に縦書き設定を行う）
  '--------------------------------------------------------------------------

    Dim mainTblCnt As Integer
    Dim tblCnt As Integer
    Dim replaceCnt As Integer
    
    mainTblCnt = ActiveDocument.Tables.Count
    For mainTblIndex = 1 To mainTblCnt
    
        'メインの新旧表+新旧表内の表の件数を取得
        tblCnt = 1 + ActiveDocument.Tables(mainTblIndex).Tables.Count
        
        '表組数分繰り返し
        For tblIndex = 1 To tblCnt
            '最初は新旧表
            If tblIndex = 1 Then
                Atbl = ActiveDocument.Tables(mainTblIndex)
            Else
                '2つ目からは表内表
                Atbl = ActiveDocument.Tables(mainTblIndex).Tables(tblIndex - 1)
            End If
            
            Atbl.Select
            
            'テーブル自体のインデント
            Atbl.Rows.LeftIndent = MillimetersToPoints(2.6)
            
            '縦書き変換
            Selection.Orientation = wdTextOrientationHorizontalRotatedFarEast
            With Selection.ParagraphFormat
                .LineSpacingRule = wdLineSpaceExactly
                .LineSpacing = 13
                .SpaceBeforeAuto = False
                .SpaceAfterAuto = False
                .FarEastLineBreakControl = False
                
                '表内表の場合のインデント調整
                If tblIndex > 1 Then
                    .LineUnitBefore = 0
                    .SpaceAfter = 1.2
                    .SpaceBefore = 1.2
                    .CharacterUnitLeftIndent = 0.4
                    .CharacterUnitRightIndent = 0.4
                End If
                
            End With
            With Selection.Font
                .Spacing = 0.36
            End With
        Next tblIndex
    Next mainTblIndex
        
End Sub

Private Sub 新旧表末尾空行削除()
  '--------------------------------------------------------------------------
  '新旧表末尾空行削除を行う
  '（新旧対照表の末尾に空行があるので削除する）
  '--------------------------------------------------------------------------

    Dim tableCnt As Integer
    Dim rowCnt As Integer
    Dim cellCnt As Integer
    Dim replaceCnt As Integer
    Dim blankFlg As Boolean
    blankFlg = True
    'メインの新旧表内の表の件数を取得
    tableCnt = ActiveDocument.Tables.Count
    '表組数分繰り返し
    For tableIndex = 1 To tableCnt
        Atbl = ActiveDocument.Tables(tableIndex)
        rowCnt = Atbl.Rows.Count
        cellCnt = Atbl.Rows(rowCnt).Cells.Count
        Set TopParagraph = Atbl.Rows(1).Cells(1).Range.Paragraphs(1)
        'セル数分繰り返し
        For cellIndex = 1 To cellCnt
            Set Aparagraph = Atbl.Rows(rowCnt).Cells(cellIndex).Range.Paragraphs(1)
            
            ' 文字列が無い
            If Aparagraph.Range.ComputeStatistics(wdStatisticWords) = 0 And Len(Trim(Aparagraph.Range.Text)) > 2 Then
                blankFlg = False
                Exit For
            Else
            
            End If
        Next cellIndex
        
        '末尾の行が空の場合は高さを最小にする（改ページ時の不要な罫線対応）
        If blankFlg = True Then
            Atbl.Rows(rowCnt).Select
            Selection.ParagraphFormat.LineSpacing = 0.7
            Selection.ParagraphFormat.LineUnitBefore = 0
            Selection.ParagraphFormat.SpaceBefore = 0
            '削除後の末尾行に罫線設定
            'ATbl.Rows(rowCnt - 1).Select
            'With Selection.Borders(wdBorderBottom)
                '.LineStyle = Options.DefaultBorderLineStyle
                '.LineWidth = Options.DefaultBorderLineWidth
                '.Color = Options.DefaultBorderColor
            'End With
        End If
    Next tableIndex
    
        
End Sub

Private Sub インデント調整()
  '--------------------------------------------------------------------------
  'インデント調整を行う
  '（各項目個別にインデント調整を行う）
  '--------------------------------------------------------------------------

    Dim tblCnt As Integer
    Dim replaceCnt As Integer
    tblCnt = ActiveDocument.Tables.Count
    '表組数分繰り返し
    For tblIndex = 1 To tblCnt
        Atbl = ActiveDocument.Tables(tblIndex)
        tblClmCnt = Atbl.Columns.Count
        tblRowCnst = Atbl.Rows.Count
        ATextNextReadFlg = True
    
        ' 表の行間設定
        Atbl.Select
        With Selection.ParagraphFormat
            .SpaceBefore = 2.3
            .LineSpacing = 14.5
            .LineUnitBefore = 0.36
            .WordWrap = True
        End With
        With Selection.Font
            .Spacing = 0.36
            '.Scaling = 100
        End With
    
        'セル数分繰り返し
        For cellsIndex = 1 To Atbl.Cells.Count
            AParagraphIndex = 0
            
            'パラグラフ数分繰り返し
            For cellParagraphIndex = 1 To Atbl.Cells(cellsIndex).Range.Paragraphs.Count
            
                'パラグラフ決定
                Set Aparagraph = Atbl.Cells(cellsIndex).Range.Paragraphs(cellParagraphIndex)
                
                '新旧表内のインデント調整（表内表はインデント調整をしない）
                If Aparagraph.Range.Cells.NestingLevel = 1 Then
                    'インデント調整
                    Aparagraph.Range.ParagraphFormat.CharacterUnitLeftIndent = Aparagraph.Range.ParagraphFormat.CharacterUnitLeftIndent - 0.3
                End If

            Next cellParagraphIndex
            
        Next cellsIndex
        
        ' 表タイトルの行間設定
        Atbl.Rows(1).Range.Select
        Selection.ParagraphFormat.LineUnitBefore = 0
        Selection.ParagraphFormat.SpaceBefore = 0
        
    Next tblIndex
    
End Sub

Private Sub 縦中横処理(ByVal mokujiIndexList As Collection)
  '--------------------------------------------------------------------------
  '縦中横処理を行う
  '（表内の１セル毎に、行頭が以下のものを処理対象とする）
  ' ・括弧付き数字「(１)、(２)」
  ' ・括弧付きローマ数字（小）「(ｉ)、(ｉｉ)」
  ' ・括弧付きローマ数字（大）「(Ｉ)、(ＩＩ)」
  ' ・括弧付き漢数字「(一)、(二)」
  ' ・括弧付きイロハ「(イ)、(ロ)」
  ' ・括弧付きアイウ「(ア)、(イ)」
  ' ・括弧付き英字（小）「(ａ)、(ｂ)」
  ' ・括弧付き英字（大）「(Ａ)、(Ｂ)」
  ' ・目次番号（ハイフンで囲まれた半角数字「- 1 -、- 2 -」
  ' 20180209 行頭のみの判定は廃止。本文中に含まれる全てを対象とする。
  ' 20180307 Ｗｅｂ版新旧対照表ツールの号細で選択できる括弧付き表記全てを対象とする。
  ' 20180329 新旧表外にも縦中横処理を行うように変更
  '--------------------------------------------------------------------------
    Dim targetList As New Collection
    Dim targetName As String
    Dim targetReg As Object
    Dim matches
    Dim targetLen As Integer
    Dim lineWide As Single
    Dim fakeLineFlg As Boolean
    Set targetReg = CreateObject("VBScript.RegExp")
    targetList.Add ("[0-9]{1,}") '半角数字
    targetList.Add ("（[ｉｖｘＩＶＸ]{1,}）") '括弧付きローマ数字
    targetList.Add ("（[一二三四五六七八九十〇の０-９]{1,}）") '括弧付き数字、漢数字
    targetList.Add ("（[ア-ン]{1,1}）") '括弧付きイロハ、アイウ（カタカナ）
    targetList.Add ("（[ａ-ｚＡ-Ｚ]{1,1}）") '括弧付き英字
    targetList.Add ("- [0-9]{1,} -") '半角数字（ハイフン付）

    For ListIndex = 1 To targetList.Count
        targetName = targetList(ListIndex)
        
        '対象形式の場合、半角に変換し縦中横表記にする
        Set fRng = ActiveDocument.Range(Start:=0, End:=0)
        
        With fRng.Find
            .MatchCase = False
            .MatchWholeWord = False
            .MatchByte = False
            .MatchAllWordForms = False
            .MatchSoundsLike = False
            .MatchFuzzy = False
            .MatchWildcards = True
            .Text = targetName
        End With
        Do
            If fRng.Find.Execute = False Then Exit Do
            
            targetRange = fRng.Text
            fakeLineFlg = False
            If ListIndex >= 2 And ListIndex <= 4 And fRng.Font.Underline = wdUnderlineSingle Then
                ' 括弧付きで罫線ありの場合、罫線は外して括弧の外側に「|」を付与する
                fRng.Font.Underline = wdUnderlineNone
                fRng.Text = Replace(fRng.Text, "）", "）|")
                fakeLineFlg = True
                
            End If
            
            '目次がある場合
            If mokujiIndexList(ConstMILMokujiNum) > 1 Then
                targetRange = Replace(Replace(targetRange, "-", ""), " ", "") ' 目次の不要部分を除去（ハイフンが付いている場合に除去）
                fRng.Text = targetRange
            End If
            targetLen = fRng.Characters.Count
            fRng.CharacterWidth = wdWidthHalfWidth
            fRng.HorizontalInVertical = wdHorizontalInVerticalFitInLine '幅を広く設定する場合　 fRng.HorizontalInVertical = wdHorizontalInVerticalResizeLine
            fRng.Collapse Direction:=wdCollapseEnd
            
            fRng.Select
                        
            With Selection.ParagraphFormat
                                
                .LineSpacingRule = wdLineSpaceAtLeast
                .LineSpacing = 12
                .LineUnitBefore = 0
                .SpaceBefore = 0
                'If targetLen = 3 Then
                '    .LineUnitAfter = 0.12
                '    With targetReg
                '        .Pattern = "（[一二三四五六七八九十]）"
                '        .IgnoreCase = False
                '        .Global = True
                '    End With
                '    Set matches = targetReg.Execute(targetRange)
                '    For Each match In matches
                '        lineWide = 0.24 ' 漢数字が一文字の場合は0.24の間隔を行後に追加する
                '        If .LineUnitAfter < lineWide Then ' 元の幅よりも大きくする必要があるときのみセット
                '            .LineUnitAfter = lineWide
                '            '.LineSpacing =
                '        End If
                '    Next match
                'Else
                    'lineWide = 0.36 + (0.08 * (targetLen - 3)) ' 3文字以上の場合は1文字につき、0.08の間隔を行後に追加する
                    'If .LineUnitAfter < lineWide Then ' 元の幅よりも大きくする必要があるときのみセット
                    '    .LineUnitAfter = lineWide
                    '    .LineSpacingRule = wdLineSpaceExactly
                    '    .LineSpacing = 16
                    'End If
                    'If targetLen > 4 Then
                    '    lineWide = 0.36 + (0.08 * (targetLen - 4)) ' 4文字以上の場合は1文字につき、0.08の間隔を行前に追加する
                    '    If .LineUnitBefore < lineWide Then ' 元の幅よりも大きくする必要があるときのみセット
                    '        .LineUnitBefore = lineWide
                    '    End If
                    'End If
                'End If
            End With
            
            
            '括弧の疑似罫線がセットされている場合
            If fakeLineFlg = True Then
                'Selection.MoveRight Unit:=wdCharacter, Count:=1
                'フォントを変更
                Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
                'Selection.Font.Name = "ＭＳ ゴシック"
                'Selection.Font.Size = 10.5
                Selection.Font.Bold = True
                
                '閉じカッコと疑似罫線の文字間を狭く
                Selection.MoveLeft Unit:=wdCharacter, Count:=1, Extend:=wdExtend
                Selection.Font.Spacing = -3.2
                
                'カッコ全体に対し表示倍率を100に戻す
                Selection.MoveLeft Unit:=wdCharacter, Count:=targetLen - 2, Extend:=wdExtend
                Selection.Font.Scaling = 100
            Else
                'カッコ全体に対し表示倍率を100に戻す
                Selection.MoveLeft Unit:=wdCharacter, Count:=targetLen, Extend:=wdExtend
                Selection.Font.Scaling = 100
                
            End If
            
        Loop
    Next
End Sub
Function 新旧対照ファイル内容コピー() As Boolean
    新旧対照ファイル内容コピー = False
    Dim rtfFileExistsFlg As Boolean
    Dim filePath As String
    Dim rtfPath As String
    Dim docxPath As String
    Dim defaultDoc As Word.Document
    Dim fileName As String
    Dim extentionName As String
    Dim folderName As String
    Dim tmpFolderName As String
    Dim fso As Object
    Dim sh As Object
    Dim zfo As Object
    Dim tfo As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    rtfFileExistsFlg = False
    filePath = ファイル選択
    
    Set defaultDoc = ActiveDocument
    If filePath <> "" Then
        extentionName = fso.GetExtensionName(filePath)
        
        If extentionName = "zip" Then
            ' zipの場合tempフォルダに解凍して、rtfファイルがあることを確認
            folderName = fso.GetParentFolderName(filePath)
            fileName = fso.GetBaseName(filePath)
            tmpFolderName = folderName & "\" & fileName & "temp"
            If fso.folderExists(tmpFolderName) = True Then
                fso.deleteFolder tmpFolderName
            End If
            fso.CreateFolder tmpFolderName
            Set sh = CreateObject("Shell.Application")
            Set zfo = sh.Namespace(fso.GetAbsolutePathName(filePath))
            Set tfo = sh.Namespace(fso.GetAbsolutePathName(tmpFolderName))
            
            For Each f In zfo.Items
                If (f.IsFolder = False) And (f.Name = fileName & ".rtf") Then
                    '対象ファイルだった場合、tmpフォルダを作成し展開する
                    rtfFileExistsFlg = True
                    tfo.CopyHere f
                End If
            Next
            
            '展開したrtfファイルパスをセット
            rtfPath = tmpFolderName & "\" & fileName & ".rtf"
            
        Else
            'rtfファイル指定なので、ファイルパスをそのままセット
            rtfFileExistsFlg = True
            rtfPath = filePath
           
        End If
        
        '対象のrtfファイルが存在した場合、ファイルを読み込む
        If rtfFileExistsFlg = True Then
            docxPath = rtfPath & ".tmp"
            Documents.Open rtfPath
            Documents(rtfPath).Activate
            
            ActiveDocument.SaveAs fileName:=docxPath, FileFormat:=wdFormatXMLDocument
            
            Selection.WholeStory
            Selection.Copy
            
            defaultDoc.Activate
            defaultDoc.StoryRanges(wdMainTextStory).Select
            Selection.PasteAndFormat (wdPasteDefault)
            Selection.Delete '余分に入る末尾の改行を削除
        End If
ErrHandler:

        GoTo Finally
        
Finally:
        '作業ファイルを閉じ、削除する
        Documents(docxPath).Close
        
        If fso.folderExists(tmpFolderName) = True Then
            fso.deleteFolder tmpFolderName
        End If
        If fso.fileExists(docxPath) = True Then
            fso.deleteFile docxPath
        End If
        'Kill docxPath
        If rtfFileExistsFlg = True Then
            新旧対照ファイル内容コピー = True
        Else
            MsgBox ("対象の新旧対照ファイルが見つかりませんでした。")
        End If
    End If
End Function
Function ファイル選択() As String
    Dim myFD As FileDialog
    
    Set myFD = Application.FileDialog(msoFileDialogFilePicker)
    
    ファイル選択 = ""
    
    With myFD
        .Title = "縦書変換するWord用新旧対照ファイルを選択してください。"
        .AllowMultiSelect = False
        
        .Filters.Clear
        .Filters.Add "Word用新旧対照ファイル", "*.rtf,*.zip"
        
        If .Show = -1 Then
            ファイル選択 = .SelectedItems(1)
        End If
        
        .Filters.Clear
        
    End With
    
    Set myFD = Nothing
    
End Function

Function 縦中横判定(paragraphText As String) As Integer
  '--------------------------------------------------------------------------
  '縦中横の処理対象の判別を行う。
  '（括弧付き数字の場合に対象と判定する。対象：対象文字数、対象外：0）
  ' 20180209 行頭のみの判定は廃止。本文中に含まれる全てが対象
  '--------------------------------------------------------------------------
  
    Dim reg As Object
    Dim reMatch As Object
    Dim tergetText As String
    Dim replaceText As String
    Dim replaceCnt As Integer
    Set reg = CreateObject("VBScript.RegExp")
    tergetText = ""
    replaceText = paragraphText
    replaceCnt = 0
    
    With reg
        .Pattern = "（[０-９]{1,2}）"
        Set reMatch = .Execute(paragraphText)
        If reMatch.Count > 0 Then
            tergetText = reMatch(0).Value
        End If
    End With
    
    If tergetText <> "" Then
        replaceCnt = Len(tergetText)
    End If
    縦中横判定 = replaceCnt
    
    
End Function


Function 法令タイトル位置リスト取得(ByRef mokujiIndexList As Collection) As Collection
  '--------------------------------------------------------------------------
  '目次から法令リストを取得する
  '「目次」から「凡例」の間の各行から法令リストを取得する
  '　対象行判定：「フィールド更新を行ってください」が含まれているもの
  '--------------------------------------------------------------------------
    
    Dim startLabel As String ' 目次範囲開始判定文言
    Dim endLabel As String  ' 目次範囲終了判定文言
    Dim endLabel2 As String  ' 目次範囲終了判定文言２（凡例が存在しない場合に「改正案」の「改正」を終了判定に用いる）
    Dim targetLabel As String  ' 目次更新対象判定文言
    startLabel = "目次"
    endLabel = "凡例"
    endLabel2 = "改正"
    targetLabel = "フィールド更新を行ってください"
    
    Dim targetIndex As Single
    Dim mokujiIndex As Single
    Dim mokujiTitleIndex As Single
    Dim hanreiTitleIndex As Single
    Dim hanreiPage As Integer
    Dim targetEndFlg As Boolean
    Dim checkText As String
    Dim mokujiUmuFlg As Boolean
    
    Dim paragraphsCnt As Single
    paragraphsCnt = ActiveDocument.Paragraphs.Count
    
    Dim targetName As String
    Dim houreiList As New Collection
    Dim houreiIndexList As New Collection
    Dim targetReg As Object
    Dim matches
    Dim targetLen As Integer
    Dim lineWide As Single
    Set targetReg = CreateObject("VBScript.RegExp")

    targetIndex = 1
    targetEndFlg = False
    mokujiUmuFlg = False
    
    Do
        If targetEndFlg = True Then Exit Do
        
        
        '対象の場合、目次の更新を行う
        Set fRng = ActiveDocument.Paragraphs(targetIndex).Range
        checkText = Left(Replace(Replace(fRng.Paragraphs(1).Range.Text, "　", " "), " ", ""), 2)
        If checkText = startLabel Then
            mokujiUmuFlg = True
            '目次タイトルの位置セット
            mokujiTitleIndex = targetIndex
        ElseIf checkText = endLabel Then
        
            '凡例タイトルの位置セット
            hanreiTitleIndex = targetIndex
                            
            '凡例のページ数取得
            fRng.Select
            hanreiPage = Selection.Information(wdActiveEndPageNumber) 'ページ数セット
                            
            '目次項目終了
            Exit Do
        ElseIf checkText = endLabel2 Then
        
            targetIndex = targetIndex - 3
            
            '凡例タイトルの位置セット
            hanreiTitleIndex = targetIndex
                            
            '凡例のページ数取得
            fRng.Select
            hanreiPage = Selection.Information(wdActiveEndPageNumber) - 1 'ページ数セット
            
            
            '目次項目終了
            Exit Do
        End If
        
        If mokujiUmuFlg = True Then
            With fRng.Find
                .MatchCase = False
                .MatchWholeWord = False
                .MatchByte = False
                .MatchAllWordForms = False
                .MatchSoundsLike = False
                .MatchFuzzy = False
                .MatchWildcards = True
                .Text = targetLabel
            End With
            Do
                If fRng.Find.Execute = False Then Exit Do
                '法令リスト追加
                targetName = Replace(Replace(Replace(fRng.Paragraphs(1).Range.Text, "　", " "), " ", ""), targetLabel, "")
                houreiList.Add (Left(targetName, Len(targetName) - 2))
                Exit Do
            Loop
        End If
        
        targetIndex = targetIndex + 1
        '先頭10行以内に「目次」が見つからない場合は処理を抜ける（目次なしと判定）
        If targetIndex > 10 And mokujiUmuFlg = False Then Exit Do
        
        '先頭2000行以内に「凡例」が見つからない場合は処理を抜ける（凡例なしと判定）
        If targetIndex > 2000 Or targetIndex > ActiveDocument.Paragraphs.Count Then Exit Do
    Loop
    
    mokujiIndex = targetIndex
    
    If mokujiUmuFlg = True Then
        For i = 1 To houreiList.Count
            
            '法令タイトル位置のリストを取得
            Do
                '全行確認後は処理を抜ける
                If targetIndex > paragraphsCnt Then Exit Do
                            
                '対象の場合、目次の更新を行う
                Set fRng = ActiveDocument.Paragraphs(targetIndex).Range
                If Len(fRng.Paragraphs(1).Range.Text) > 4 Then
                targetName = Replace(Replace(fRng.Paragraphs(1).Range.Text, "　", " "), " ", "")
                    checkText = Mid(Left(targetName, Len(targetName) - 1), 2)
                    If checkText = houreiList(i) Then
                        If i = 1 Then
                            
                            ' 目次などの不要なページ番号を非表示に
                            Set nonPageRng = ActiveDocument.Paragraphs(targetIndex - 1).Range
                            nonPageRng.Select
                            
                            '　奇数ページの場合は偶数調整の為、改ページ(と空ページに改行)を挿入
                            If hanreiPage Mod 2 = 1 Then
                                'Set nonPageRng = ActiveDocument.Paragraphs(targetIndex - 1).Range
                                'nonPageRng.Select
                                Selection.InsertBreak Type:=wdPageBreak
                                Selection.MoveDown Unit:=wdLine, Count:=1
                                Selection.TypeParagraph
                                targetIndex = targetIndex + 1 'インデックス調整
                                Set fRng = ActiveDocument.Paragraphs(targetIndex).Range
                                nonPageRng.Select
                            End If
                            
                            ' 目次などの不要なページ番号を非表示に
                            'Set nonPageRng = ActiveDocument.Paragraphs(targetIndex - 1).Range
                            'nonPageRng.Select
                            ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                            Selection.HeaderFooter.LinkToPrevious = Not Selection.HeaderFooter.LinkToPrevious
                            ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
                            
                            '凡例のページ数取得
                            'hanreiPage = Selection.Information(wdActiveEndPageNumber) 'ページ数セット
                            'If hanreiPage Mod 2 = 1 Then
                            '    Set nonPageRng = ActiveDocument.Paragraphs(targetIndex - 1).Range
                            '    nonPageRng.Select
                            '    '　奇数ページの場合は偶数調整の為、改ページを挿入
                            '    Selection.InsertBreak Type:=wdPageBreak
                            '    'targetIndex = targetIndex + 1 'インデックス調整
                            '    Set fRng = ActiveDocument.Paragraphs(targetIndex + 1).Range
                            'End If
                            
                            ' ページ番号の降り始めとしてセクションをセット（前のセクションを引き継がない）
                            fRng.Select
                            Selection.InsertBreak Type:=wdSectionBreakNextPage
                            
                            '不要な空ページを削除（次ページの先頭行の先頭よりバックスペースで削除することにより、セクション情報は残す）
                            ActiveDocument.Paragraphs(targetIndex + 1).Range.Select
                            Selection.EndKey Unit:=wdLine
                            Selection.HomeKey Unit:=wdLine
                            Selection.TypeBackspace
                            
                            targetIndex = targetIndex + 1 'インデックス調整
                            
                            '画面をヘッダーフッター編集モードに切り替え）
                            fRng.Select
                            ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
                            Selection.HeaderFooter.LinkToPrevious = Not Selection.HeaderFooter.LinkToPrevious
                            '画面をメイン編集モードに切り替え
                            ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
                            
                            '最初のタイトル行の位置を判断した際に、タイトル以前の目次部分のインデックスをセットする
                            mokujiIndex = targetIndex - 6
                        End If
                        houreiIndexList.Add (targetIndex)
                        Exit Do
                    End If
                End If
                            
                targetIndex = targetIndex + 1
                
            Loop
        Next
        '目次インデックスセット
        mokujiIndexList.Add (mokujiIndex)
        mokujiIndexList.Add (mokujiTitleIndex)
        mokujiIndexList.Add (hanreiTitleIndex)
        
    Else
        ' 目次がなかった場合、単独（結合処理無しと判断）
        houreiIndexList.Add (1)
        mokujiIndexList.Add (1)
        mokujiIndexList.Add (0)
        mokujiIndexList.Add (0)
    End If
    
    Set 法令タイトル位置リスト取得 = houreiIndexList
End Function





Sub 目次更新(ByVal mokujiIndexList As Collection)
  '--------------------------------------------------------------------------
  '目次更新を行う
  '「目次」から「凡例」の間の各行に対して目次の更新を行う
  '　対象行判定：「フィールド更新を行ってください」が含まれているもの
  '--------------------------------------------------------------------------
    
    Dim startLabel As String ' 目次範囲開始判定文言
    Dim endLabel As String  ' 目次範囲終了判定文言
    Dim targetLabel As String  ' 目次更新対象判定文言
    startLabel = "目次"
    endLabel = "凡例"
    targetLabel = "フィールド更新を行ってください"
    
    Dim targetIndex As Single
    Dim targetEndFlg As Boolean
    Dim checkText As String
    Dim mokujiUmuFlg As Boolean
    
    Dim targetName As String
    Dim targetList As New Collection
    Dim targetReg As Object
    Dim matches
    Dim targetLen As Integer
    Dim lineWide As Single
    Set targetReg = CreateObject("VBScript.RegExp")

    targetIndex = 1
    targetEndFlg = False
    mokujiUmuFlg = False
    
    Do
        If targetEndFlg = True Then Exit Do
        
        
        '対象の場合、目次の更新を行う
        Set fRng = ActiveDocument.Paragraphs(targetIndex).Range
        checkText = Left(Replace(Replace(fRng.Paragraphs(1).Range.Text, "　", " "), " ", ""), 2)
        If checkText = startLabel Then
            mokujiUmuFlg = True
        ElseIf checkText = endLabel Then
            '目次項目終了
            Exit Do
        End If
        
        If mokujiUmuFlg = True Then
            With fRng.Find
                .MatchCase = False
                .MatchWholeWord = False
                .MatchByte = False
                .MatchAllWordForms = False
                .MatchSoundsLike = False
                .MatchFuzzy = False
                .MatchWildcards = True
                .Text = targetLabel
            End With
            Do
                If fRng.Find.Execute = False Then Exit Do
                fRng.Select
                '目次更新
                Selection.Fields.Update
                Selection.Fields.Locked = True
                Exit Do
            Loop
        End If
        
        targetIndex = targetIndex + 1
        '先頭10行以内に「目次」が見つからない場合は処理を抜ける（目次なしと判定）
        If targetIndex > 10 And mokujiUmuFlg = False Then Exit Do
        
        '凡例位置以内に「凡例」が見つからない場合は処理を抜ける（凡例なしと判定）
        If targetIndex > mokujiIndexList(ConstMILHanreiTitleNum) Then Exit Do
    Loop
    

End Sub


Private Sub フォント行間調整(houreiIndexList As Collection, mokujiIndexList As Collection)
  '--------------------------------------------------------------------------
  '表中縦書処理を行う
  '（全体に対する縦書設定だけでは表内の文字列に反映されないので、表毎に縦書き設定を行う）
  '--------------------------------------------------------------------------

    Dim mainTblCnt As Integer
    Dim tblCnt As Integer
    Dim replaceCnt As Integer
    Dim startIndex As Single
    Dim endIndex As Single
    
    ' 目次部のフォントサイズ調整（10.5）
    Selection.HomeKey Unit:=wdStory
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.MoveDown Unit:=wdLine, Count:=mokujiIndexList(ConstMILMokujiNum), Extend:=wdExtend
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.Font.Name = "ＭＳ 明朝"
    Selection.Font.Size = 10.5
    With Selection.ParagraphFormat
        .SpaceBefore = 0.3
        .LineSpacingRule = wdLineSpaceExactly
        .LineSpacing = 14.5
        .Alignment = wdAlignParagraphLeft
        .FirstLineIndent = MillimetersToPoints(-8)
        .CharacterUnitLeftIndent = 0.2
        .CharacterUnitRightIndent = 0
        .CharacterUnitFirstLineIndent = -2
        .LineUnitBefore = 0
        .LineUnitAfter = 0.5
    End With
    
    '目次タイトルのインデント
    If mokujiIndexList(ConstMILMokujiTitleNum) > 0 Then
        ActiveDocument.Paragraphs(mokujiIndexList(ConstMILMokujiTitleNum)).Range.Select
        Selection.ParagraphFormat.CharacterUnitLeftIndent = 6.2
    End If
    
    '凡例タイトルのインデント
    If mokujiIndexList(ConstMILHanreiTitleNum) > 0 Then
        ActiveDocument.Paragraphs(mokujiIndexList(ConstMILHanreiTitleNum)).Range.Select
        Selection.ParagraphFormat.CharacterUnitLeftIndent = 6.2
    End If
    
    '各法令タイトル部
    For i = 1 To houreiIndexList.Count
        ' タイトルと傍線説明部のフォントサイズ調整（10.5）
        startIndex = houreiIndexList(i)
        
        '単独法令(mokujiIndexが1)の場合は、傍線位置が異なる（タイトル後の改行を含まない）ので調整
        If mokujiIndexList(ConstMILMokujiNum) = 1 Then
            endIndex = startIndex + 1
        Else
            endIndex = startIndex + 2
        End If
        ActiveDocument.Paragraphs(startIndex).Range.Select
        'Selection.MoveDown Unit:=wdLine, Count:=2, Extend:=wdExtend
        Selection.Font.Name = "ＭＳ 明朝"
        Selection.Font.Size = 10.5
        With Selection.ParagraphFormat
            .SpaceBefore = 0.3
            .LineSpacingRule = wdLineSpaceExactly
            .LineSpacing = 14.5
            .Alignment = wdAlignParagraphLeft
            .FirstLineIndent = MillimetersToPoints(-8)
            .CharacterUnitLeftIndent = 0.2
            .CharacterUnitRightIndent = 0
            .CharacterUnitFirstLineIndent = -2
            .LineUnitBefore = 0
            .LineUnitAfter = 1
        End With
        
        '傍線説明部のフォーマット設定
        ActiveDocument.Paragraphs(endIndex).Range.Select
        Selection.Font.Name = "ＭＳ 明朝"
        Selection.Font.Size = 10.5
        With Selection.ParagraphFormat
            .SpaceBefore = 0.3
            .LineSpacingRule = wdLineSpaceExactly
            .LineSpacing = 14.5
            .Alignment = wdAlignParagraphRight
            .FirstLineIndent = MillimetersToPoints(0)
            .CharacterUnitLeftIndent = 0
            .CharacterUnitRightIndent = 0
            .CharacterUnitFirstLineIndent = 0
            .LineUnitBefore = 0
            .LineUnitAfter = 0.5
        End With
    Next
        
End Sub


